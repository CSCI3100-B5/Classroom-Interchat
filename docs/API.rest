// =========================================================
// Database structures
// =========================================================

// Each type of objects lives in its own collection

Token object
{
  "id": "<token id>",
  "createdBy": "<user id>",
  "receivedBy": "<user id>",
  "createdAt": "<timestmap>",
  "classroom": "<classroom id>",
  "isValid": boolean,
  "value": "<string>"
}

User object
{
  "name": "<string>",
  "email": "<email>",
  "password": "<hash>",
  "id": "<user id>",
  "isAdmin": boolean,
  "createdAt": "<timestamp>",
  "tokenIds": [ "<string>" ],  // IDs of refresh and access tokens. Refresh tokens are only valid if their IDs are in this array
  "emailVerification": "<string>" | null,  // the email verification code sent to user, null when email is already verified
  "lastVerifiedEmail": "<email>"
}

Classroom object
{
  "name": "<string>",
  "id": "<classroom id>",
  "host": "<user id>",
  "createdAt": "<timestmap>",
  "participants": {
    "userId": "<user id>",
    "permission": "instructor/student/requesting",
    "isMuted": boolean
  },
  "isMuted": boolean
}

Message object
{
  "id": "<message id>",
  "createdAt": "<timestamp>",
  "classroom": "<classroom id>",
  "sender": "<user id>",
  "type": "text|poll|status|question|reply",
  "content": "<string>"  // text content or status content
  | {  // poll content
    "type": "SAQ|MCQ",
    "prompt": "<string>",
    "choices": [ "<string>" ],   // only MCQ
    "correct": [ number ]     // only MCQ // index of correct answer inside "choices"
                              // if there are more than one correct answer, assume all answers need to be checked to be considered correct
  }
  | { // question content
    "isResolved": boolean,
    "content": "<string>"
  }
  | { // reply content
    "replyTo": "<message id>",
    "content": "<string>"
  }
}

PollAnswer object
{
  "id": "<pollanswer id>",
  "pollId": "<message id>",
  "createdAt": "<timestamp>",
  "content": "<string>" | number
}

############################################################

// =========================================================
// REST APIs
// =========================================================
// /auth

// Login = generate access and refresh token for this login session

POST /api/auth/login

{
  "email": "<email>",
  "password": "<string>"
}

RESPONSE:
{
  "accessToken": "<string>",
  "refreshToken": "<string>",
  "user": {
    "name": "<string>",
    "email": "<email>",
    "id": "<user id>",
    "isAdmin": boolean,
    "createdAt": "<timestamp>"
  }
}

############################################################

// Sign up
// This endpoint does not log in the user automatically.
// Send a separate login request to do so

POST /api/auth/signup

{
  "name": "<string>",
  "email": "<email>",
  "password": "<string>"
}

RESPONSE:
{
  "name": "<string>",
  "email": "<email>",
  "id": "<user id>",
  "createdAt": "<timestamp>",
  "isAdmin": boolean
}

############################################################

// Request a new access token using the refresh token when the old one expires
// Should be done automatically when any request fails with UNAUTHORIZED status

GET /api/auth/token
Authorization: Bearer <refresh token>

RESPONSE:
{
  "accessToken": "<string>",
  "userId": "<user id>"
}

############################################################

// Makes a refresh token invalid

DELETE /api/auth/logout
Authorization: Bearer <refresh token>

RESPONSE: NO_CONTENT

############################################################

// =========================================================
// /user

// Request user profile data
// Only allowed if :userId matches access token

GET /api/user/:userId
Authorization: Bearer <access token>



RESPONSE:
{
  "name": "<string>",
  "email": "<email>",
  "id": "<user id>",
  "isAdmin": boolean,
  "createdAt": "<timestamp>"
}

############################################################

// Admin route: create a new user with less restriction

POST /api/user
Authorization: Bearer <access token>

{
  "name": "<string>",
  "email": "<email>",
  "isAdmin": boolean,
  "emailVerification": "<string>" | null,
  "password": "<string>",
  "lastVerifiedEmail": "<email>"
}

RESPONSE:
{
  "name": "<string>",
  "email": "<email>",
  "password": "<hash>",
  "id": "<user id>",
  "isAdmin": boolean,
  "createdAt": "<timestamp>",
  "emailVerification": "<string>" | null,
  "lastVerifiedEmail": "<email>"
}

############################################################

// Update user profile data
// Only allowed if :userId matches access token or user is admin
// Can update name, email or password
// Only need to provide fields that are being updated
// Other fields can be omitted

PATCH /api/user/:userId
Authorization: Bearer <access token>

{
  "name": "<string>",
  "email": "<email>",
  "password": "<string>"
}

RESPONSE:
{
  "name": "<string>",
  "email": "<email>",
  "id": "<user id>",
  "createdAt": "<timestamp>",
  "isAdmin": boolean
}

############################################################

// =========================================================
// /token

// Get all tokens of a given user id
// "created" are tokens created by the user
// "received" are tokens received by the user
GET /api/token/:userId
Authorization: Bearer <access token>



RESPONSE:
{
  "created": [
    {
      "id": "<token id>",
      "createdBy": {
        "id": "<user id>",
        "name": "<string>",
        "email": "<email>"
      },
      "receivedBy": {
        "id": "<user id>",
        "name": "<string>",
        "email": "<email>"
      },
      "createdAt": "<timestamp>",
      "isValid": boolean
    }
  ],
  "received": [
    {
      "id": "<token id>",
      "createdBy": {
        "id": "<user id>",
        "name": "<string>",
        "email": "<email>"
      },
      "receivedBy": {
        "id": "<user id>",
        "name": "<string>",
        "email": "<email>"
      },
      "createdAt": "<timestamp>",
      "isValid": boolean
    }
  ]
}

############################################################

// Sets isValid of a token to false
// isValid is just for instructors' reference, not "useful" in our system

PATCH /api/token/:tokenId/invalidate
Authorization: Bearer <access token>



RESPONSE: NO_CONTENT

// create token is handled in socket.io

// =============================================
// /classroom

// handled in socket.io